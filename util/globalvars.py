# encoding:utf-8import osclass GlobalVars:    """    member: 1. config_global_path, config_deploy_path and config_train_path    # 配置文件路径            2. train_state, deploy_state                                       # 训练/服务部署状态，是否在运行(True/False)            3. datasets_path, windows_datasets_path                            # 数据集路径，前者为服务器访问本地路径，后者为客户端访问路径            4. logs_deploy_path, logs_train_path                               #  训练/服务部署进程的log保存路径            PS:通过 set_basic_config 函数创建    """    _data = {}    @classmethod    def set(cls, key, value):        cls._data[key] = value    @classmethod    def get(cls, key):        return cls._data.get(key)    @classmethod    def delete(cls, key):        if key in cls._data:            del cls._data[key]# set dict global vardef set_basic_config(param):    """    :param param: dict:ip, config_dir path and Windows config dir path    """    ip = param['ip']    config_dir = param['config_dir']    windows_config_dir = param['windows_config_dir'] # 由于linux服务器共享文件夹， windows客户端访问存在问题，建立一个windows访问路径    # ip    GlobalVars.set('ip', ip)    # 1.config path    GlobalVars.set('config_global_path', os.path.join(config_dir, "global.yaml"))    GlobalVars.set('config_deploy_path', os.path.join(config_dir, "deploy.yaml"))    GlobalVars.set('config_train_path', os.path.join(config_dir, "train.yaml"))    # init model state    GlobalVars.set('train_state', False)    GlobalVars.set('deploy_state', False)    # 2.dataset path    GlobalVars.set('datasets_path', param['datasets_path'])    GlobalVars.set('windows_datasets_path', param['datasets_path'])    # 3.log path    GlobalVars.set('logs_deploy_path', os.path.join(param['log_dir'], "Deploy"))    GlobalVars.set('logs_train_path', os.path.join(param['log_dir'], "Train"))