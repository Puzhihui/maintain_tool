# encoding:utf-8# 创建ADCServer的相关进程、API，即软件过算法的Http请求。import timefrom flask import Blueprint, requestimport jsonfrom datetime import datetimeimport multiprocessing as mpimport subprocessimport osfrom util.globalvars import GlobalVarsfrom util.config import read_config_centent, write_config_cententfrom util.deploylog import get_deploy_log_content, deploy_log_writefrom multiprocessing import freeze_supportfrom config.load_config import bat_cfgfrom util.run_script_tools import run_bat, check_process_status, kill_processfreeze_support()  # 防止多开adc_server_state_api = Blueprint('adc_server_state_api', __name__)adc_server_api = Blueprint('adc_server_api', __name__)deploy_print_api = Blueprint('deploy_print_api', __name__)deploy_config_api = Blueprint('deploy_config_api', __name__)# global vardeploy_process = mp.Process(target=run_bat)# ADCServerState@adc_server_state_api.route("/ADCServerState", methods=['POST'])def ADC_server_state():    global deploy_process    if request.method == 'POST':        request_param = request.get_json()        results = {"ErrorCode": 1, "Msg": "option error!", "Data": None}        if request_param['Option'] == "get":            _isDeploy = 1 if GlobalVars.get('deploy_state') else 0            time.sleep(1)            if _isDeploy == 1 and check_process_status(deploy_process) is not True:                _isDeploy = 0                GlobalVars.set('deploy_state', False)                deploy_log_write("server flask process exit!")            results = {"ErrorCode": 0, "Msg": "Success", "Data":{"IsRun": _isDeploy}}        return json.dumps(results)# ADCServer@adc_server_api.route("/ADCServer", methods=['POST'])def ADC_server():    global deploy_process    if request.method == 'POST':        request_param = request.get_json()        str_current_time = datetime.now().strftime("%Y-%m-%d %H:%M")        results = {"ErrorCode": 1, "Msg": "option error!", "Data": None}        if request_param['Option'] == "start":            deploy_process = run_bat(bat_cfg.server_bat_path, create_console=True)            GlobalVars.set('deploy_state', True)            results = {"ErrorCode": 0, "Msg": "Success", "Data": {"UpdateTime": str_current_time}}            deploy_log_write("ADC server start success!")        elif request_param['Option'] == "stop":            kill_process(deploy_process)            GlobalVars.set('deploy_state', False)            results = {"ErrorCode": 0, "Msg": "Success", "Data": {"UpdateTime": str_current_time}}            print("adc server exit!")            deploy_log_write("ADC server process exit!")        return json.dumps(results)# DeployPrint@deploy_print_api.route("/DeployPrint", methods=['POST'])def deploy_print():    if request.method == 'POST':        request_param = request.get_json()        results = dict()        results = {"ErrorCode": 1, "Msg": "option error!", "Data": None}        if request_param['Option'] == "get":            _start_time = request_param['Datetime']            data = get_deploy_log_content(_start_time)            results = {"ErrorCode": 0, "Msg": "Success", "Data": data}        return json.dumps(results)# DeployConfig@deploy_config_api.route("/DeployConfig", methods=['POST'])def deploy_config():    if request.method == 'POST':        request_param = request.get_json()        results = dict()        results = {"ErrorCode": 1, "Msg": "option error!", "Data": None}        if request_param['Option'] == "get":            text = read_config_centent(GlobalVars.get('config_deploy_path'))            results = {"ErrorCode": 0, "Msg": "Success", "Data": text}        elif request_param['Option'] == "set":            text = request_param['Data']            write_config_centent(GlobalVars.get('config_deploy_path'), text)            results = {"ErrorCode": 0, "Msg": "Success"}        return json.dumps(results)