# encoding:utf-8# 创建ADCServer的相关进程、API，即软件过算法的Http请求。import timefrom flask import Blueprint, requestimport jsonfrom datetime import datetimeimport multiprocessing as mpimport subprocessimport osfrom models.serverflask import start_deploy_server, structure_init_deploy_dictfrom utils.globalvars import GlobalVarsfrom utils.config import read_config_centent, write_config_cententfrom utils.deploylog import get_deploy_log_content, deploy_log_writefrom multiprocessing import freeze_supportfrom config.load_config import run_server_cfgfreeze_support()  # 防止多开adc_server_state_api = Blueprint('adc_server_state_api', __name__)adc_server_api = Blueprint('adc_server_api', __name__)deploy_print_api = Blueprint('deploy_print_api', __name__)deploy_config_api = Blueprint('deploy_config_api', __name__)# global vardeploy_process = mp.Process(target=start_deploy_server)# ADCServerState@adc_server_state_api.route("/ADCServerState", methods=['POST'])def ADC_server_state():    global deploy_process    if request.method == 'POST':        request_param = request.get_json()        results = {"ErrorCode": 1, "Msg": "option error!", "Data": None}        if request_param['Option'] == "get":            _isDeploy = 1 if GlobalVars.get('deploy_state') else 0            time.sleep(1)            if _isDeploy == 1 and check_process_status(deploy_process) is not True:                _isDeploy = 0                GlobalVars.set('deploy_state', False)                deploy_log_write("server flask process exit!")            results = {"ErrorCode": 0, "Msg": "Success", "Data":{"IsRun": _isDeploy}}        return json.dumps(results)def start_adc_script():    activate_command = run_server_cfg.conda_cmd    process = subprocess.Popen(activate_command, shell=True)    process.wait()    if process.returncode == 0:        script_dir = run_server_cfg.adc_server_root        os.chdir(script_dir)        server_process = subprocess.Popen(['python', run_server_cfg.server_file])        server_status = check_process_status(server_process)        return server_process, server_status    else:        print('Failed to activate Conda environment')    return None, Falsedef check_process_status(process):    if process.poll() is None:        print('子进程运行中')        return True    else:        print('子进程已终止')        return Falsedef kill_process(sub_process):    if check_process_status(sub_process):        sub_process.terminate()        print('子进程已终止')# ADCServer@adc_server_api.route("/ADCServer", methods=['POST'])def ADC_server():    global deploy_process    if request.method == 'POST':        request_param = request.get_json()        str_current_time = datetime.now().strftime("%Y-%m-%d %H:%M")        results = {"ErrorCode": 1, "Msg": "option error!", "Data": None}        if request_param['Option'] == "start":            init_server_config = structure_init_deploy_dict(GlobalVars)            # deploy_process = mp.Process(target=start_deploy_server, args=(init_server_config, ))  # server进程            # deploy_process.start()            # GlobalVars.set('deploy_state', True)            deploy_process, server_status = start_adc_script()            GlobalVars.set('deploy_state', server_status)            if server_status:                results = {"ErrorCode": 0, "Msg": "Success", "Data": {"UpdateTime": str_current_time}}                deploy_log_write("server start success!")            else:                results = {"ErrorCode": 1, "Msg": "Fail, server start error!", "Data": {"UpdateTime": str_current_time}}                deploy_log_write("server start fail!")        elif request_param['Option'] == "stop":            kill_process(deploy_process)            GlobalVars.set('deploy_state', False)            results = {"ErrorCode": 0, "Msg": "Success", "Data": {"UpdateTime": str_current_time}}            print("adc server exit!")            deploy_log_write("server flask process exit!")            # results = {"ErrorCode": 1, "Msg": "Fail, DeployServer not alive!", "Data": {"UpdateTime": str_current_time}}            # if deploy_process.is_alive():            #     deploy_process.kill()            #     deploy_log_write("server flask process exit!")            #     GlobalVars.set('deploy_state', False)            #     results = {"ErrorCode": 0, "Msg": "Success", "Data": {"UpdateTime": str_current_time}}        return json.dumps(results)# DeployPrint@deploy_print_api.route("/DeployPrint", methods=['POST'])def deploy_print():    if request.method == 'POST':        request_param = request.get_json()        results = dict()        results = {"ErrorCode": 1, "Msg": "option error!", "Data": None}        if request_param['Option'] == "get":            _start_time = request_param['Datetime']            data = get_deploy_log_content(_start_time)            results = {"ErrorCode": 0, "Msg": "Success", "Data": data}        return json.dumps(results)# DeployConfig@deploy_config_api.route("/DeployConfig", methods=['POST'])def deploy_config():    if request.method == 'POST':        request_param = request.get_json()        results = dict()        results = {"ErrorCode": 1, "Msg": "option error!", "Data": None}        if request_param['Option'] == "get":            text = read_config_centent(GlobalVars.get('config_deploy_path'))            results = {"ErrorCode": 0, "Msg": "Success", "Data": text}        elif request_param['Option'] == "set":            text = request_param['Data']            write_config_centent(GlobalVars.get('config_deploy_path'), text)            results = {"ErrorCode": 0, "Msg": "Success"}        return json.dumps(results)